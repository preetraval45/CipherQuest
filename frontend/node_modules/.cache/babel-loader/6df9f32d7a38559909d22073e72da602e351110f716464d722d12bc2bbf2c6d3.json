{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\raval\\\\OneDrive - University of North Carolina at Charlotte\\\\Desktop\\\\HTML CSS\\\\CipherQuest\\\\frontend\\\\src\\\\components\\\\auth\\\\ProtectedRoute.js\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport { Navigate, useLocation } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ProtectedRoute = ({\n  children\n}) => {\n  _s();\n  const location = useLocation();\n\n  // Check if user is authenticated (you can replace this with your auth logic)\n  const isAuthenticated = () => {\n    // For now, check if there's a token in localStorage\n    // In a real app, you'd check against your auth state/context\n    return localStorage.getItem('authToken') !== null;\n  };\n  if (!isAuthenticated()) {\n    // Redirect to login page with the current location as state\n    // This allows the login page to redirect back after successful authentication\n    return /*#__PURE__*/_jsxDEV(Navigate, {\n      to: \"/login\",\n      state: {\n        from: location\n      },\n      replace: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 12\n    }, this);\n  }\n  return children;\n};\n_s(ProtectedRoute, \"pkHmaVRPskBaU4tMJuJJpV42k1I=\", false, function () {\n  return [useLocation];\n});\n_c = ProtectedRoute;\nexport default ProtectedRoute;\nvar _c;\n$RefreshReg$(_c, \"ProtectedRoute\");","map":{"version":3,"names":["React","Navigate","useLocation","jsxDEV","_jsxDEV","ProtectedRoute","children","_s","location","isAuthenticated","localStorage","getItem","to","state","from","replace","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/raval/OneDrive - University of North Carolina at Charlotte/Desktop/HTML CSS/CipherQuest/frontend/src/components/auth/ProtectedRoute.js"],"sourcesContent":["import React from 'react';\r\nimport { Navigate, useLocation } from 'react-router-dom';\r\n\r\nconst ProtectedRoute = ({ children }) => {\r\n  const location = useLocation();\r\n  \r\n  // Check if user is authenticated (you can replace this with your auth logic)\r\n  const isAuthenticated = () => {\r\n    // For now, check if there's a token in localStorage\r\n    // In a real app, you'd check against your auth state/context\r\n    return localStorage.getItem('authToken') !== null;\r\n  };\r\n\r\n  if (!isAuthenticated()) {\r\n    // Redirect to login page with the current location as state\r\n    // This allows the login page to redirect back after successful authentication\r\n    return <Navigate to=\"/login\" state={{ from: location }} replace />;\r\n  }\r\n\r\n  return children;\r\n};\r\n\r\nexport default ProtectedRoute;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,QAAQ,EAAEC,WAAW,QAAQ,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEzD,MAAMC,cAAc,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EACvC,MAAMC,QAAQ,GAAGN,WAAW,CAAC,CAAC;;EAE9B;EACA,MAAMO,eAAe,GAAGA,CAAA,KAAM;IAC5B;IACA;IACA,OAAOC,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC,KAAK,IAAI;EACnD,CAAC;EAED,IAAI,CAACF,eAAe,CAAC,CAAC,EAAE;IACtB;IACA;IACA,oBAAOL,OAAA,CAACH,QAAQ;MAACW,EAAE,EAAC,QAAQ;MAACC,KAAK,EAAE;QAAEC,IAAI,EAAEN;MAAS,CAAE;MAACO,OAAO;IAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EACpE;EAEA,OAAOb,QAAQ;AACjB,CAAC;AAACC,EAAA,CAjBIF,cAAc;EAAA,QACDH,WAAW;AAAA;AAAAkB,EAAA,GADxBf,cAAc;AAmBpB,eAAeA,cAAc;AAAC,IAAAe,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}